{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/bona/Desktop/my-project/VueX/node_modules/vuesax/dist/components/vsSlider/vsSlider.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/bona/Desktop/my-project/VueX/node_modules/vuesax/dist/components/vsSlider/vsSlider.vue","filename":"/home/bona/Desktop/my-project/VueX/node_modules/vuesax/dist/components/vsSlider/vsSlider.vue","passPerPreset":false,"envName":"development","cwd":"/home/bona/Desktop/my-project/VueX","root":"/home/bona/Desktop/my-project/VueX","generatorOpts":{"filename":"/home/bona/Desktop/my-project/VueX/node_modules/vuesax/dist/components/vsSlider/vsSlider.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/bona/Desktop/my-project/VueX/node_modules/vuesax/dist/components/vsSlider/vsSlider.vue"}},"code":"var _color;\n\nmodule.link(\"../../utils/color.js\", {\n  \"default\": function (v) {\n    _color = v;\n  }\n}, 0);\nmodule.exportDefault({\n  name: 'VsSlider',\n  props: {\n    value: {},\n    disabled: {\n      \"default\": false,\n      type: [Boolean, String]\n    },\n    color: {\n      \"default\": 'primary',\n      type: String\n    },\n    max: {\n      \"default\": 100,\n      type: [Number, String]\n    },\n    min: {\n      \"default\": 0,\n      type: Number\n    },\n    ticks: {\n      \"default\": false,\n      type: Boolean\n    },\n    step: {\n      \"default\": 1,\n      type: [Number, String]\n    },\n    icon: {\n      \"default\": null,\n      type: String\n    },\n    iconPack: {\n      \"default\": 'material-icons',\n      type: String\n    },\n    textFixed: {\n      \"default\": null,\n      type: String\n    }\n  },\n  data: function () {\n    return {\n      leftx: 0,\n      leftTwo: 0,\n      effect: false,\n      two: false,\n      actived: false,\n      changeValue: false,\n      valueCircle1: 0,\n      valueCircle2: 0\n    };\n  },\n  computed: {\n    isEquals: function () {\n      return Array.isArray(this.value) ? this.value[0] == this.value[1] : false;\n    },\n    countTicks: function () {\n      return this.max + 1;\n    },\n\n    /*\r\n     * styles component\r\n     */\n    styleSlider: function () {\n      return {\n        background: _color.getColor(this.color, 1)\n      };\n    },\n    styleLineOne: function () {\n      var widthx = this.leftTwo - this.leftx;\n      var leftx = this.leftx;\n\n      if (this.leftx > this.leftTwo) {\n        widthx = this.leftx - this.leftTwo;\n        leftx = this.leftTwo;\n      }\n\n      return {\n        width: widthx + \"%\",\n        left: leftx + \"%\",\n        background: _color.getColor(this.color, 1)\n      };\n    },\n    styleCircle: function () {\n      return {\n        left: this.leftx + \"%\",\n        border: \"2px solid \" + _color.getColor(this.color, 1)\n      };\n    },\n    styleCircleTwo: function () {\n      return {\n        left: this.leftTwo + \"%\",\n        border: \"2px solid \" + _color.getColor(this.color, 1)\n      };\n    },\n    styleEfect: function () {\n      return {\n        left: this.leftx + \"%\",\n        background: _color.getColor(this.color, 1)\n      };\n    },\n    styleText: function () {\n      return {\n        background: _color.getColor(this.color, 1)\n      };\n    }\n  },\n  watch: {\n    value: function () {\n      var _this = this;\n\n      if (!this.actived) {\n        this.changePosition();\n      }\n\n      this.changeValue = true;\n      setTimeout(function () {\n        _this.changeValue = false;\n      }, 300);\n      this.$emit('change', this.value);\n    },\n    leftx: function () {\n      if (Array.isArray(this.value)) {\n        if (this.leftx > this.leftTwo) {\n          this.valueCircle1 = this.value[1];\n        } else {\n          this.valueCircle1 = this.value[0];\n        }\n      } else {\n        this.valueCircle1 = this.value;\n      }\n    },\n    leftTwo: {\n      handler: function () {\n        if (this.leftTwo > this.leftx) {\n          this.valueCircle2 = this.value[1];\n        } else {\n          this.valueCircle2 = this.value[0];\n        }\n      },\n      deep: true\n    }\n  },\n  mounted: function () {\n    this.changePosition();\n  },\n  methods: {\n    mousewheelx: function (evt) {\n      if (!Array.isArray(this.value)) {\n        if (evt.wheelDelta > 0) {\n          var val = this.value + this.step;\n\n          if (this.value >= this.max) {\n            val = this.max;\n          }\n\n          this.leftx = val;\n          this.$emit('input', val);\n        } else {\n          var _val = this.value - this.step;\n\n          if (this.value <= this.min) {\n            _val = this.min;\n          }\n\n          this.leftx = _val;\n          this.$emit('input', _val);\n        }\n      }\n    },\n    keydownLeft: function () {\n      if (!Array.isArray(this.value)) {\n        var val = this.value - this.step;\n\n        if (this.value == this.min) {\n          val = this.min;\n        }\n\n        this.leftx = val;\n        this.$emit('input', val);\n      }\n    },\n    keydownRight: function () {\n      if (!Array.isArray(this.value)) {\n        var val = this.value + this.step;\n\n        if (this.value >= this.max) {\n          val = this.max;\n        }\n\n        this.leftx = val;\n        this.$emit('input', val);\n      }\n    },\n    changePosition: function () {\n      if (Array.isArray(this.value)) {\n        this.leftx = Math.round((this.value[1] - this.min) / (this.max - this.min) * 100);\n        this.leftTwo = Math.round((this.value[0] - this.min) / (this.max - this.min) * 100);\n      } else {\n        this.leftx = Math.round((this.value - this.min) / (this.max - this.min) * 100);\n      }\n    },\n    styleTicks: function (index) {\n      var lengthPerStep = 100 / ((this.max - this.min) / this.step);\n      var steps = Math.round(index / lengthPerStep);\n      return {\n        left: steps * lengthPerStep + '%'\n      };\n    },\n    activeFocus: function () {\n      window.addEventListener('mousemove', this.mouseMovex);\n      window.addEventListener('mouseup', this.removeEvents);\n      window.addEventListener('touchmove', this.mouseMovex);\n      window.addEventListener('touchend', this.removeEvents);\n    },\n    mouseMovex: function (evt) {\n      var slider = this.$refs.slider;\n      var leftx;\n      /*\r\n      * change position left circle and bar\r\n      */\n\n      if (evt.type == 'touchmove') {\n        leftx = event.targetTouches[0].clientX - slider.getBoundingClientRect().left;\n      } else {\n        leftx = evt.clientX - slider.getBoundingClientRect().left;\n      }\n\n      if (Math.sign(leftx) == -1) {\n        leftx = 0;\n      } else if (leftx > slider.clientWidth) {\n        leftx = slider.clientWidth;\n      }\n\n      this.changeLeft(leftx);\n    },\n    removeEvents: function () {\n      this.two = this.actived = false;\n      window.removeEventListener('mouseup', this.removeEvents);\n      window.removeEventListener('mousemove', this.mouseMovex);\n      window.removeEventListener('touchmove', this.mouseMovex);\n      window.removeEventListener('touchend', this.removeEvents);\n    },\n    clickSlider: function (evt) {\n      var _this2 = this;\n\n      var slider = this.$refs.slider;\n      var leftx = evt.clientX - slider.getBoundingClientRect().left;\n      this.effect = true;\n      setTimeout(function () {\n        _this2.effect = false;\n      }, 200);\n      var obtenerPorcentaje = leftx / slider.clientWidth * 100;\n      var porcentajex = Math.round(obtenerPorcentaje);\n\n      if (Array.isArray(this.value)) {\n        if (Math.abs(porcentajex - this.leftx) > Math.abs(porcentajex - this.leftTwo)) {\n          this.two = true;\n        } else {\n          this.two = false;\n        }\n      }\n\n      this.changeLeft(leftx);\n    },\n    changeLeft: function (leftx) {\n      var slider = this.$refs.slider;\n      var obtenerPorcentaje = leftx / slider.clientWidth * 100;\n      var porcentajex = Math.round(obtenerPorcentaje); // let val = Math.round(porcentajex / 100 * (this.max))\n\n      var lengthPerStep = 100 / ((this.max - this.min) / this.step);\n      var steps = Math.round(porcentajex / lengthPerStep);\n      var val = steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min;\n      val = Math.round(val); // let val = Math.round(porcentajex * (this.max - this.min) * 0.01 + this.min)\n\n      if (this.ticks) {\n        // val =  Math.round(porcentajex / 100 * (this.max / this.step)) * this.step\n        if (val > this.max) {\n          val = this.max;\n          this[this.two ? 'leftTwo' : 'leftx'] = 100;\n        } else {\n          this[this.two ? 'leftTwo' : 'leftx'] = Math.round(steps * lengthPerStep);\n        }\n      } else {\n        this[this.two ? 'leftTwo' : 'leftx'] = Math.round(steps * lengthPerStep);\n      }\n\n      if (Array.isArray(this.value)) {\n        var valueNew = val;\n\n        if (val == this.max) {\n          valueNew = this.max;\n        }\n\n        var vals = this.value;\n        var min = Math.round(this.leftTwo / 100 * (this.max / this.step)) * this.step;\n        var max = Math.round(this.leftx / 100 * (this.max / this.step)) * this.step;\n\n        if (this.two) {\n          if (min < max) {\n            this.$emit('input', [valueNew, vals[1]]);\n          } else if (min > max) {\n            this.$emit('input', [vals[0], valueNew]);\n          } else {\n            this.$emit('input', [valueNew, valueNew]);\n          }\n        } else {\n          if (min > max) {\n            this.$emit('input', [valueNew, vals[1]]);\n          } else if (min < max) {\n            this.$emit('input', [vals[0], valueNew]);\n          } else {\n            this.$emit('input', [valueNew, valueNew]);\n          }\n        }\n      } else {\n        this.$emit('input', val);\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/home/bona/Desktop/my-project/VueX/node_modules/vuesax/dist/components/vsSlider/vsSlider.vue"],"names":["_color","module","link","v","exportDefault","name","props","value","disabled","type","Boolean","String","color","max","Number","min","ticks","step","icon","iconPack","textFixed","data","leftx","leftTwo","effect","two","actived","changeValue","valueCircle1","valueCircle2","computed","isEquals","Array","isArray","countTicks","styleSlider","background","getColor","styleLineOne","widthx","width","left","styleCircle","border","styleCircleTwo","styleEfect","styleText","watch","changePosition","setTimeout","$emit","handler","deep","mounted","methods","mousewheelx","evt","wheelDelta","val","keydownLeft","keydownRight","Math","round","styleTicks","index","lengthPerStep","steps","activeFocus","window","addEventListener","mouseMovex","removeEvents","slider","$refs","event","targetTouches","clientX","getBoundingClientRect","sign","clientWidth","changeLeft","removeEventListener","clickSlider","obtenerPorcentaje","porcentajex","abs","valueNew","vals"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport _color from '../../utils/color.js'\r\nexport default {\r\n  name:'VsSlider',\r\n  props:{\r\n    value:{},\r\n    disabled:{\r\n      default:false,\r\n      type:[Boolean,String]\r\n    },\r\n    color:{\r\n      default:'primary',\r\n      type:String\r\n    },\r\n    max:{\r\n      default:100,\r\n      type:[Number,String]\r\n    },\r\n    min:{\r\n      default:0,\r\n      type:Number\r\n    },\r\n    ticks:{\r\n      default:false,\r\n      type:Boolean\r\n    },\r\n    step:{\r\n      default: 1,\r\n      type:[Number,String]\r\n    },\r\n    icon:{\r\n      default:null,\r\n      type:String\r\n    },\r\n    iconPack:{\r\n      default:'material-icons',\r\n      type:String\r\n    },\r\n    textFixed:{\r\n      default:null,\r\n      type:String\r\n    }\r\n  },\r\n  data:()=>({\r\n    leftx:0,\r\n    leftTwo:0,\r\n    effect:false,\r\n    two:false,\r\n    actived:false,\r\n    changeValue:false,\r\n    valueCircle1:0,\r\n    valueCircle2:0,\r\n  }),\r\n  computed:{\r\n    isEquals(){\r\n      return Array.isArray(this.value)?this.value[0] == this.value[1]:false\r\n    },\r\n    countTicks(){\r\n      return this.max + 1\r\n    },\r\n    /*\r\n     * styles component\r\n     */\r\n    styleSlider() {\r\n      return {\r\n        background:_color.getColor(this.color,1)\r\n      }\r\n    },\r\n    styleLineOne() {\r\n      let widthx = this.leftTwo - this.leftx\r\n      let leftx = this.leftx\r\n      if(this.leftx > this.leftTwo) {\r\n        widthx = this.leftx - this.leftTwo\r\n        leftx = this.leftTwo\r\n      }\r\n      return {\r\n        width:`${widthx}%`,\r\n        left:`${leftx}%`,\r\n        background:_color.getColor(this.color,1)\r\n      }\r\n    },\r\n    styleCircle() {\r\n      return {\r\n        left:`${this.leftx}%`,\r\n        border:`2px solid ${_color.getColor(this.color,1)}`\r\n      }\r\n    },\r\n    styleCircleTwo() {\r\n      return {\r\n        left:`${this.leftTwo}%`,\r\n        border:`2px solid ${_color.getColor(this.color,1)}`\r\n      }\r\n    },\r\n    styleEfect(){\r\n      return {\r\n        left:`${this.leftx}%`,\r\n        background:_color.getColor(this.color,1)\r\n      }\r\n    },\r\n    styleText(){\r\n      return {\r\n        background: _color.getColor(this.color,1)\r\n      }\r\n    }\r\n  },\r\n  watch:{\r\n    value(){\r\n      if(!this.actived) {\r\n        this.changePosition()\r\n      }\r\n      this.changeValue = true\r\n      setTimeout(()=>{\r\n        this.changeValue = false\r\n      },300)\r\n      this.$emit('change',this.value)\r\n    },\r\n    leftx() {\r\n      if(Array.isArray(this.value)){\r\n        if(this.leftx > this.leftTwo){\r\n          this.valueCircle1 = this.value[1]\r\n        } else {\r\n          this.valueCircle1 = this.value[0]\r\n        }\r\n      } else {\r\n        this.valueCircle1 = this.value\r\n      }\r\n    },\r\n    leftTwo: {\r\n      handler: function() {\r\n        if(this.leftTwo > this.leftx){\r\n          this.valueCircle2 = this.value[1]\r\n        } else {\r\n          this.valueCircle2 = this.value[0]\r\n        }\r\n\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  mounted(){\r\n    this.changePosition()\r\n  },\r\n\r\n  methods:{\r\n    mousewheelx(evt){\r\n      if(!Array.isArray(this.value)) {\r\n        if(evt.wheelDelta > 0){\r\n          let val = this.value + this.step\r\n          if (this.value >= this.max) {\r\n            val = this.max\r\n          }\r\n          this.leftx = val\r\n          this.$emit('input', val)\r\n        } else {\r\n          let val = this.value - this.step\r\n          if(this.value <= this.min){\r\n            val = this.min\r\n          }\r\n          this.leftx = val\r\n          this.$emit('input', val)\r\n        }\r\n      }\r\n    },\r\n    keydownLeft(){\r\n      if(!Array.isArray(this.value)) {\r\n        let val = this.value - this.step\r\n        if(this.value == this.min){\r\n          val = this.min\r\n        }\r\n        this.leftx = val\r\n        this.$emit('input', val)\r\n      }\r\n    },\r\n    keydownRight(){\r\n      if(!Array.isArray(this.value)) {\r\n        let val = this.value + this.step\r\n        if (this.value >= this.max) {\r\n          val = this.max\r\n        }\r\n        this.leftx = val\r\n        this.$emit('input', val)\r\n      }\r\n    },\r\n    changePosition(){\r\n      if(Array.isArray(this.value)){\r\n        this.leftx =  Math.round((this.value[1] - this.min) / (this.max - this.min) * 100)\r\n        this.leftTwo = Math.round((this.value[0] - this.min) / (this.max - this.min) * 100)\r\n      } else {\r\n        this.leftx =  Math.round((this.value - this.min) / (this.max - this.min) * 100)\r\n      }\r\n    },\r\n    styleTicks(index){\r\n      let lengthPerStep = 100 / ((this.max - this.min) / this.step);\r\n      let steps = Math.round(index / lengthPerStep);\r\n      return {\r\n        left: steps * lengthPerStep + '%'\r\n      }\r\n    },\r\n    activeFocus(){\r\n      window.addEventListener('mousemove', this.mouseMovex);\r\n      window.addEventListener('mouseup', this.removeEvents);\r\n      window.addEventListener('touchmove', this.mouseMovex);\r\n      window.addEventListener('touchend', this.removeEvents);\r\n    },\r\n    mouseMovex(evt){\r\n      let slider = this.$refs.slider\r\n      let leftx\r\n      /*\r\n      * change position left circle and bar\r\n      */\r\n      if(evt.type=='touchmove'){\r\n        leftx = event.targetTouches[0].clientX - slider.getBoundingClientRect().left\r\n      } else {\r\n        leftx = evt.clientX - slider.getBoundingClientRect().left\r\n      }\r\n\r\n\r\n      if(Math.sign(leftx)==-1 ){\r\n        leftx = 0\r\n      } else if (leftx > slider.clientWidth) {\r\n        leftx = slider.clientWidth\r\n      }\r\n\r\n      this.changeLeft(leftx)\r\n    },\r\n    removeEvents(){\r\n      this.two = this.actived = false\r\n      window.removeEventListener('mouseup', this.removeEvents);\r\n      window.removeEventListener('mousemove', this.mouseMovex);\r\n      window.removeEventListener('touchmove', this.mouseMovex);\r\n      window.removeEventListener('touchend', this.removeEvents);\r\n    },\r\n    clickSlider(evt){\r\n      let slider = this.$refs.slider\r\n      let leftx = evt.clientX - slider.getBoundingClientRect().left\r\n      this.effect = true\r\n      setTimeout(()=>{\r\n        this.effect = false\r\n      },200)\r\n\r\n      let obtenerPorcentaje = (leftx / slider.clientWidth) * 100\r\n      let porcentajex = Math.round(obtenerPorcentaje)\r\n\r\n      if(Array.isArray(this.value)){\r\n        if(Math.abs(porcentajex - this.leftx) > Math.abs(porcentajex - this.leftTwo)){\r\n          this.two = true\r\n        } else {\r\n          this.two = false\r\n        }\r\n      }\r\n\r\n      this.changeLeft(leftx)\r\n    },\r\n    changeLeft(leftx){\r\n      let slider = this.$refs.slider\r\n      let obtenerPorcentaje = (leftx / slider.clientWidth) * 100\r\n      let porcentajex = Math.round(obtenerPorcentaje)\r\n      // let val = Math.round(porcentajex / 100 * (this.max))\r\n\r\n      const lengthPerStep = 100 / ((this.max - this.min) / this.step);\r\n      const steps = Math.round(porcentajex / lengthPerStep);\r\n      let val = steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min;\r\n      val = Math.round(val)\r\n\r\n\r\n      // let val = Math.round(porcentajex * (this.max - this.min) * 0.01 + this.min)\r\n      if(this.ticks){\r\n        // val =  Math.round(porcentajex / 100 * (this.max / this.step)) * this.step\r\n        if(val > this.max) {\r\n          val = this.max\r\n          this[this.two?'leftTwo':'leftx'] = 100\r\n        } else {\r\n          this[this.two?'leftTwo':'leftx'] = Math.round(steps * lengthPerStep)\r\n        }\r\n      } else {\r\n        this[this.two?'leftTwo':'leftx'] = Math.round(steps * lengthPerStep)\r\n      }\r\n\r\n\r\n      if(Array.isArray(this.value)){\r\n        let valueNew = val\r\n        if(val == this.max){\r\n          valueNew = this.max\r\n        }\r\n        let vals = this.value\r\n        let min = Math.round(this.leftTwo / 100 * (this.max / this.step)) * this.step\r\n        let max = Math.round(this.leftx / 100 * (this.max / this.step)) * this.step\r\n        if(this.two){\r\n          if(min < max){\r\n            this.$emit('input',[valueNew,vals[1]])\r\n          } else if (min > max) {\r\n            this.$emit('input',[vals[0],valueNew])\r\n          } else {\r\n            this.$emit('input',[valueNew,valueNew])\r\n          }\r\n        } else {\r\n          if(min > max){\r\n            this.$emit('input',[valueNew,vals[1]])\r\n          } else if (min < max) {\r\n            this.$emit('input',[vals[0],valueNew])\r\n          } else {\r\n            this.$emit('input',[valueNew,valueNew])\r\n          }\r\n        }\r\n      } else {\r\n        this.$emit('input',val)\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"sourceType":"script","hash":"57729be79650f9a59109f033d2c6c94e9ffcbcdc"}
